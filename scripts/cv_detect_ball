#!/usr/bin/env python

#necessary imports
from __future__ import print_function
import rospy
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2

class DetectBall(object):
    """
    """
    def __init__(self):

        self.rows = 0
        self.cols = 0

        self.image_array = 0

        self.bridge = CvBridge()

        #initialize subscriber
        rospy.Subscriber('io/internal_camera/head_camera/image_rect_color', Image, self.detect_ball)


    def detect_ball(self, image):
        """
        """
        self.rows = image.height
        self.cols = image.width

        encoding = str(image.encoding)

        image_in = self.bridge.imgmsg_to_cv2(image, encoding)
        image_gray = cv2.cvtColor(image_in, cv2.COLOR_BGR2GRAY)

        #cv2.imshow("Sawyer Head Camera", image_gray)
        #cv2.waitKey(0)

        image_circles = cv2.HoughCircles(image_gray, cv2.HOUGH_GRADIENT, 1.01, 1)
        print(image_circles)

        circles = np.around(image_circles)
        rospy.loginfo("Circles Found")

        for i in circles[0, :]:
            cv2.circle(image_in, (i[0], i[1]), i[2], (0, 255, 0), 2)

        cv2.imshow('circles', image_in)
        cv2.waitKey(0)

def main():
    """
    "Main" function; initializes the node and calls the DetectBall class
    """
    rospy.loginfo("Beginning Ball Detection...")
    while not rospy.is_shutdown():
        DetectBall()

if __name__ == '__main__':
    rospy.init_node('cv_detect_ball')
    rospy.loginfo("CV Node Initialized")
    try:
        main()
    except rospy.ROSInterruptException:
        pass
