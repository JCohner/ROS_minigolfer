#!/usr/bin/env python

#necessary imports
from __future__ import print_function
import rospy
#import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge #CvBridgeError
import cv2

class DetectBall(object):
    """
    Detects a ball in the visual field. Currently uses HSV color segmentation
    """
    def __init__(self):
        """
        Initialization function. Creates variables, image converter, and publisher/subscriber
        """
        self.rows = 0                       #image height placeholder
        self.cols = 0                       #image width placeholder

        #HSV-space ranges for ball color
        #found using script from: https://github.com/opencv/opencv/blob/3.4/samples/cpp/tutorial_code/ImgProc/Threshold_inRange.cpp
        self.H_range = (104, 115)
        self.S_range = (126, 255)           #ADJUST THESE TO MATCH COLOR OF ACTUAL BALL
        self.V_range = (0, 255)

        self.bridge = CvBridge()            #converts ROS image to cv2 image

        #initialize subscriber
        rospy.Subscriber('io/internal_camera/head_camera/image_rect_color', Image, self.detect_ball)

        #initialize publisher
        self.image_pub = rospy.Publisher('/sawyer_image_out', Image, queue_size=1)

    def detect_ball(self, image):
        """
        Detects the ball using color thresholding
        """
        self.rows = image.height            #get image size
        self.cols = image.width

        encoding = str(image.encoding)      #image data encoding

        image_in = self.bridge.imgmsg_to_cv2(image, encoding)       #convert ROS image to cv2 image
        image_HSV = cv2.cvtColor(image_in, cv2.COLOR_BGR2HSV)       #convert cv2 image to HSV space

        #threshold HSV image per thresholds identified above
        color_thresh = cv2.inRange(image_HSV, (self.H_range[0], self.S_range[0], self.V_range[0]),
                                   (self.H_range[1], self.S_range[1], self.V_range[1]))

        #Gaussian blur
        blur = cv2.GaussianBlur(color_thresh, (5, 5), 0)

        #find contours in blurred image
        image_cont, contours, hierarchy = cv2.findContours(blur, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

        #find smallest circles enclosing identified contours
        circles = []                                                #empty list to hold circle parameters
        for i in range(len(contours)):                              #draw circles for all contours
            (x, y), radius = cv2.minEnclosingCircle(contours[i])    #minimum enclosing circle for contour
            centerX = int(x)                                        #center X coordinate
            centerY = int(y)                                        #center Y coordinate
            radius = int(radius)                                    #radius
            circle = ((centerX, centerY), radius)                   #tuple of circle parameters
            circles.append(circle)                                  #add circle to list

        for i in range(len(circles)):               #for all circles
            if circles[i][1] > 15:                  #if circle radius is too large
                pass                                #don't draw it
            elif circles[i][1] < 15:                #if radius is not too large
                circleImg = cv2.circle(image_in, (circles[i][0][0], circles[i][0][1]), #draw the circle
                                       circles[i][1], (0, 0, 255), 2)

        image_out = self.bridge.cv2_to_imgmsg(circleImg, encoding)  #convert cv2 image to ROS image

        self.image_pub.publish(image_out)           #publish image

def main():
    """
    Main function; initializes the node and calls the DetectBall class
    """
    rospy.loginfo("Beginning Ball Detection...")            #console output message
    det = DetectBall()
    while not rospy.is_shutdown():
        pass

if __name__ == '__main__':
    rospy.init_node('cv_detect_ball')                       #initialize node
    rospy.loginfo("CV Node Initialized")                    #console output message
    try:
        main()
    except rospy.ROSInterruptException:
        pass
