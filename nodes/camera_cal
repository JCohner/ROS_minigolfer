#!/usr/bin/env python

import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from geometry_msgs.msg import Transform, Quaternion, Vector3
from tf.transformations import quaternion_from_matrix
from mini_golf.srv import CamCal, CamCalResponse, CV_POIs, CV_POIsResponse

#bringing this in for debug purposes
def se3_inv(matrix):
    """
    Calculates the inverse of an se(3) transformation matrix.
    """
    R = matrix[0:3,0:3] #roation matrix
    p = matrix[0:3,-1] #translation vector

    RT = np.transpose(R)                        #transpose rotation matrix

    inv_p = -np.matmul(RT, p)                      #invert translation vector

    g = np.zeros((4,4))
    g[0:3,0:3] = RT 
    g[0:3,-1] = inv_p
    g[-1,-1] = 1

    return g                                    #output transformation matrix

class CameraCallib(object):
    def __init__(self):
        rospy.loginfo("hello world")
        self.sawyer_cam_matrix = np.reshape(np.asarray(rospy.get_param("/sawyer_cam/camera_matrix/data")), (3, 3))
        self.overhead_cam_matrix = np.reshape(np.asarray(rospy.get_param("/overhead_cam/camera_matrix/data")), (3, 3))
        self.sawyer_cam_distortion = np.reshape(np.asarray(rospy.get_param("/sawyer_cam/distortion_coefficients/data")), (5, 1))
        self.overhead_cam_distortion = np.reshape(np.asarray(rospy.get_param("/overhead_cam/distortion_coefficients/data")), (5, 1))

        self.killa = 0
        self.killb = 0

        rospy.Subscriber("/overhead_image_out", Image, self.overhead_cal_callback)
        rospy.Subscriber("/io/internal_camera/head_camera/image_raw", Image, self.sawyer_cal_callback)

        #bringing this in for debug purposes
        self.get_pois = rospy.ServiceProxy('/get_pois', CV_POIs)
        self.T_saw = np.zeros((4,4))
        self.T_over = np.zeros((4,4))

        self.bridge = CvBridge()

        self.criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, .001)

        self.sawyer_transform = Transform()
        self.overhead_transform = Transform()
        rospy.Service('/get_camera_cal', CamCal, self.set_camera_cal)

        self.main()

    def set_camera_cal(self, req):
    	rospy.loginfo("got request for transforms")
    	resp = CamCalResponse()
    	print(self.sawyer_transform)
    	print(self.overhead_transform)
    	resp.sawyer_transform = self.sawyer_transform
    	resp.overhead_transform = self.overhead_transform
    	return resp

    def construct_obj_pts(self):
        objpts = np.zeros((48, 1, 3))
        for i in range(48):
            objpts[i][0] = np.array([.0254*i % (6 * 0.0254), 0.0254*np.floor(i/6), 0])

        return objpts

    def overhead_cal_callback(self, data):
        img = self.bridge.imgmsg_to_cv2(data, "bgr8")
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        ret_val, corners = cv2.findChessboardCorners(gray, (6, 8), None)
        # print(ret_val)
        if ret_val == True:# and not self.killa:
            corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), self.criteria)
            overhead_objpts = self.construct_obj_pts()
            #print(overhead_objpts)
            ret, rvec, tvec, inliers = cv2.solvePnPRansac(overhead_objpts,
                                                          corners2,
                                                          self.overhead_cam_matrix,
                                                          self.overhead_cam_distortion)

            R = cv2.Rodrigues(rvec)
            T = np.zeros((4, 4))
            T[0:3, 0:3] = R[0]
            T[-1, :] = np.array([0, 0, 0, 1])
            # print(T)
            q = quaternion_from_matrix(T)
            T[0:3,-1] = tvec[0]
            self.overhead_transform.rotation = Quaternion(q[0], q[1], q[2], q[3])
            self.overhead_transform.translation = Vector3(tvec[0][0], tvec[1][0], tvec[2][0])
            self.T_over = T
            # print(self.overhead_transform)
            self.killa = 1

    def sawyer_cal_callback(self, data):
        img = self.bridge.imgmsg_to_cv2(data, "bgr8")
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        ret_val, corners = cv2.findChessboardCorners(gray, (6, 8), None)
        if ret_val == True:# and not self.killb:
            corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), self.criteria)
            sawyer_objpts = self.construct_obj_pts()

            ret, rvec, tvec, inliers = cv2.solvePnPRansac(sawyer_objpts,
                                                          corners2,
                                                          self.sawyer_cam_matrix,
                                                          self.sawyer_cam_distortion)

            R = cv2.Rodrigues(rvec)
            T = np.zeros((4, 4))
            T[0:3, 0:3] = R[0]
            T[-1, :] = np.array([0, 0, 0, 1])
            # print(T)
            q = quaternion_from_matrix(T)
            T[0:3,-1] = tvec[0]
            self.sawyer_transform.rotation = Quaternion(q[0], q[1], q[2], q[3])
            self.sawyer_transform.translation = Vector3(tvec[0][0], tvec[1][0], tvec[2][0])
            self.T_saw = T
            self.killb = 1

    def main(self):
        rate = rospy.Rate(1)
        # while not rospy.is_shutdown() and not (self.killa and self.killb):
        while not rospy.is_shutdown():
            resp = self.get_pois()
            ball_pos_o = np.array([resp.ball_pose.position.x, resp.ball_pose.position.y, resp.ball_pose.position.z, 1])
            hole_pos_o = np.array([resp.hole_pose.position.x, resp.hole_pose.position.y, resp.hole_pose.position.z, 1])

            #transform to ball and hole positions in game frame
            ball_pos_g = np.matmul(se3_inv(self.T_over),ball_pos_o)
            hole_pos_g = np.matmul(se3_inv(self.T_over),hole_pos_o)

            #transform to ball and hole positions in sawyer frame
            ball_pos_s = np.around(np.matmul(self.T_saw, ball_pos_g),4)
            hole_pos_s = np.around(np.matmul(self.T_saw, hole_pos_g),4)

            rospy.loginfo("hole pos:\n{}".format(hole_pos_s))
            rospy.loginfo("ball pos:\n{}".format(ball_pos_s))

            rate.sleep()

if __name__ == '__main__':

    rospy.init_node("camera_cal")
    CameraCallib()
