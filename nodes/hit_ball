#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
import math
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from mini_golf.srv import HitBall, HitBallResponse

class HitTheBall(object):
	def __init__(self):
		self.robot = moveit_commander.RobotCommander()
		self.scene = moveit_commander.PlanningSceneInterface()
		self.group_name = "right_arm"
		self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
		#self.display_trajectory_publisher = rospy.Publisher('/move_group display_planned_path',moveit_msgs.msg.DisplayTrajectory,queue_size=20)
		
	### Finding the x-y coordinates for the forward motion ###
	def ball_pos_to_sawyer(self,ball_pos):
		#ball_pose = np.array([self.ball_pose.position.x,self.ball_pose.position.y,self.ball_pose.position.z])
		#hole_pose = np.array([self.hole_pose.position.x,self.hole_pose.position.y,self.hole_pose.position.z])		
		ball_pose = [0.7,0.355,-0.43]
		hole_pose = [0.736,0.432,-0.44]
		ball_x = ball_pose[0]
		ball_y = ball_pose[1]
		hole_x = hole_pose[0]
		hole_y = hole_pose[1]
		self.wpose = self.move_group.get_current_pose().pose
		ef_x = self.wpose.position.x
		ef_y = self.wpose.position.y
		dir_x = hole_x-ball_x 
		dir_y = hole_y -ball_y
		hit_direction = [dir_x,dir_y]
		
		return hit_direction

	### checks the current state of the robot ###
	def current_state(self):
		current_state = self.robot.get_current_state() 
		return current_state

	### planning a path and then executing it ###
	# def plan_path(self,hit_direction):
		

	def my_putter(self,req):
		self.waypoints = []
		self.wpose = self.move_group.get_current_pose().pose
		joint_goal = self.move_group.get_current_joint_values()
		# self.ball_pose = req.ball_position
		# self.hole_pose = req.hole_position
		#return HitBallResponse()

		
		## AREA 1 ##	
		
		if self.wpose.position.y > 0.3 and self.wpose.position.x<=0.7:	
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] +  np.pi/20
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3] - np.pi/3
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		## AREA 2 ##			
		elif 0< self.wpose.position.y <= 0.3 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] + np.pi/6
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] - np.pi/3
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		## AREA 2.5 ##
		elif -0.3<= self.wpose.position.y <= 0 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] - np.pi/6
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] + np.pi/3
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		## AREA 3 ##
		if self.wpose.position.y < -0.3 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0]
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] -np.pi/2
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0]
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] + np.pi
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		
		## AREA 4 ##
		elif self.wpose.position.y < -0.3 and self.wpose.position.x>0.7:
			joint_goal[0]= joint_goal[0] -np.pi/6
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/3
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		
		## AREA 5##			
		elif -0.3<= self.wpose.position.y <= 0.3 and self.wpose.position.x>0.7:
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] -np.pi/6
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/3
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			
		
		## AREA 6##
		elif self.wpose.position.y > 0.3 and self.wpose.position.x>0.7:	
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] - np.pi/3
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] #- np.pi/2
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		return HitBallResponse()


if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('hit_ball', anonymous=True, log_level=rospy.DEBUG)
    my_put = HitTheBall()
    rospy.loginfo(my_put.current_state())
    # hit_direction= my_put.ball_pos_to_sawyer([0.35,0.30,-0.44])
    hit_service = rospy.Service('hit_ball', HitBall, my_put.my_putter)
    #my_put.plan_path(hit_direction)
    rospy.spin()

"""
Additional code that might be useful later



		self.wpose.position.x = self.wpose.position.x -hit_direction[0]*1
		self.wpose.position.y = self.wpose.position.y -hit_direction[1]*1
		self.waypoints.append(copy.deepcopy(self.wpose))
		self.wpose.position.x = self.wpose.position.x+hit_direction[0]*2.5
		self.wpose.position.y = self.wpose.position.y + hit_direction[1]*2.5
		self.waypoints.append(copy.deepcopy(self.wpose))
			
		(plan,fraction) = self.move_group.compute_cartesian_path(self.waypoints,0.01,0.0)
		self.move_group.execute(plan,wait=True)
"""
