#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
import math
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from mini_golf.srv import HitBall, HitBallResponse

""" 
This node checks the current location of the end effector. Then it makes the sawyer robot hit the ball with a specific joint motion according to the end effector location. After the hitting motion, it returns back to sawyer's home configuration. This whole motion is then turned into a service

SERVICE:

--> hit_ball: The node creates the hit_ball service to be called in the game planner node. The service takes nothing and also returns nothing.

"""
class HitTheBall(object):
	def __init__(self):
		self.robot = moveit_commander.RobotCommander()
		self.scene = moveit_commander.PlanningSceneInterface()
		self.group_name = "right_arm"
		self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
		
	### Finding the x-y coordinates for the forward motion ###
	
	def ball_pos_to_sawyer(self,ball_pos):	
		ball_pose = [0.7,0.355,-0.43]
		hole_pose = [0.736,0.432,-0.44]
		ball_x = ball_pose[0]
		ball_y = ball_pose[1]
		hole_x = hole_pose[0]
		hole_y = hole_pose[1]
		self.wpose = self.move_group.get_current_pose().pose
		ef_x = self.wpose.position.x
		ef_y = self.wpose.position.y
		dir_x = hole_x-ball_x 
		dir_y = hole_y -ball_y
		hit_direction = [dir_x,dir_y]
		
		return hit_direction

	### checks the current state of the robot ###
	def current_state(self):
		current_state = self.robot.get_current_state() 
		return current_state

	### returns to the home configuration ###
	

	def return_home(self):
		joint_goal = self.move_group.get_current_joint_values()
		joint_goal[0]=0.0
		joint_goal[1]=0.0
		joint_goal[2]=0.0
		joint_goal[3]=np.pi/2
		joint_goal[4]=0.0
		joint_goal[5]=0.0
		joint_goal[6] = -np.pi/2
		self.move_group.go(joint_goal, wait=True)
		self.move_group.stop()
		
	### checks the location of the end effector makes the putting motion according to that location#
	def my_putter(self,req):
		self.waypoints = []
		self.wpose = self.move_group.get_current_pose().pose
		joint_goal = self.move_group.get_current_joint_values()
		
		## AREA 1 ##	
		
		if self.wpose.position.y > 0.3 and self.wpose.position.x<=0.7:	
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] +  np.pi/2
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] - np.pi
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		## AREA 2 ##			
		elif 0< self.wpose.position.y <= 0.3 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] + np.pi/12
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] - np.pi/4
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		## AREA 2.5 ##
		elif -0.3<= self.wpose.position.y <= 0 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0] - np.pi/3
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/2
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		## AREA 3 ##
		if self.wpose.position.y < -0.3 and self.wpose.position.x<=0.7:
			joint_goal[0]= joint_goal[0] -np.pi/4
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/2
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		
		## AREA 4 ##
		elif self.wpose.position.y < -0.3 and self.wpose.position.x>0.7:
			joint_goal[0]= joint_goal[0] -np.pi/6
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/3
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		
		## AREA 5##			
		elif -0.3<= self.wpose.position.y <= 0.3 and self.wpose.position.x>0.7:
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] -np.pi/5
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] + np.pi/4
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] 
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			
		
		## AREA 6##
		elif self.wpose.position.y > 0.3 and self.wpose.position.x>0.7:	
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0] 
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2] 
			joint_goal[3]= joint_goal[3] 
			joint_goal[4]= joint_goal[4] 
			joint_goal[5]= joint_goal[5] - np.pi/2
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)

		rospy.sleep(5)
		self.return_home()
		return HitBallResponse()


if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('hit_ball', anonymous=True, log_level=rospy.DEBUG)
    my_put = HitTheBall()
    rospy.loginfo(my_put.current_state())
    hit_service = rospy.Service('hit_ball', HitBall, my_put.my_putter)
    rospy.spin()

