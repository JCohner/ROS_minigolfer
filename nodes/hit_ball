#!/usr/bin/env python

#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
from tf.transformations import quaternion_from_euler

class HitTheBall(object):
	def __init__(self):
		self.robot = moveit_commander.RobotCommander()
		self.scene = moveit_commander.PlanningSceneInterface()
		self.group_name = "right_arm"
		self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
		self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', moveit_msgs.msg.DisplayTrajectory,queue_size=20)

	def current_state(self):
		current_state = self.robot.get_current_state()
		return current_state
	
	def plan_path(self):
		self.waypoints = []
		self.wpose = self.move_group.get_current_pose().pose
		self.wpose.position.z += 1*0.1
		self.wpose.position.y -= 1*0.1
		self.waypoints.append(copy.deepcopy(self.wpose))
		

		self.wpose.position.x += 1*0.1
		self.waypoints.append(copy.deepcopy(self.wpose))
	
		self.wpose.position.y -= 1* 0.1 
		self.waypoints.append(copy.deepcopy(self.wpose))
		
		(plan,fraction) = self.move_group.compute_cartesian_path(self.waypoints,0.01,0.0)
		return plan, fraction

	def execute_plan(self,plan):
		self.move_group.execute(plan,wait=True)

if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('hit_ball', anonymous=True, log_level=rospy.DEBUG)
    my_putter = HitTheBall()

    rospy.loginfo(my_putter.current_state())


    #position, orientation = my_sawyer.get_start_pose([0.63,-0.34,0.07],[0.68,0.27,0.07])
    plan , fraction = my_putter.plan_path()	   
    #rospy.loginfo('The current pose is: %s', current_state())

    my_putter.execute_plan(plan)
    rospy.spin()

