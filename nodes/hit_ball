#!/usr/bin/env python

#!/usr/bin/env python

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
import math
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler

class HitTheBall(object):
	def __init__(self):
		self.robot = moveit_commander.RobotCommander()
		self.scene = moveit_commander.PlanningSceneInterface()
		self.group_name = "right_arm"
		self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
		self.display_trajectory_publisher = rospy.Publisher('/move_group display_planned_path',moveit_msgs.msg.DisplayTrajectory,queue_size=20)
		self.move_group.set_max_velocity_scaling_factor(1.0)
        	self.move_group.set_max_acceleration_scaling_factor(1.0)
	
	### Finding the x-y coordinates for the forward motion ###
	def ball_pos_to_sawyer(self,ball_pos):
		ball_x = ball_pos[0]
		ball_y = ball_pos[1]
		self.wpose = self.move_group.get_current_pose().pose
		ef_x = self.wpose.position.x
		ef_y = self.wpose.position.y
		dir_x = ball_x -ef_x
		dir_y = ball_y -ef_y
		hit_direction = [dir_x,dir_y]
		return hit_direction

	### checks the current state of the robot###
	def current_state(self):
		current_state = self.robot.get_current_state() 
		return current_state
	### planning a path and then executing it###
	def plan_path(self,hit_direction):
		self.waypoints = []
		self.wpose = self.move_group.get_current_pose().pose
		if self.wpose.position.y < -0.3 and self.wpose.position.x<=0.4:
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0]
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] -np.pi/2
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
			joint_goal = self.move_group.get_current_joint_values()
			joint_goal[0]= joint_goal[0]
			joint_goal[1]= joint_goal[1]
			joint_goal[2]= joint_goal[2]
			joint_goal[3]= joint_goal[3]
			joint_goal[4]= joint_goal[4]
			joint_goal[5]= joint_goal[5] + np.pi
			joint_goal[6] = joint_goal[6]
			self.move_group.go(joint_goal, wait=True)
		
		elif self.wpose.position.y < -0.3 and self.wpose.position.x>0.5:
			self.wpose.position.x += hit_direction.position.x
			self.wpose.position.y += hit_direction.position.y
			self.wpose.position.z += hit_direction.position.z
			self.wpose.orientation.x += hit_direction.orientation.x
			self.wpose.orientation.y = hit_direction.orientation.y
			self.wpose.orientation.z = hit_direction.orientation.z
			self.wpose.orientation.w =hit_direction.orientation.w
			self.waypoints.append(copy.deepcopy(self.wpose))
			(plan,fraction) = self.move_group.compute_cartesian_path(self.waypoints,0.01,0.0)
			self.move_group.execute(plan,wait=True)
		else:		
			self.wpose.position.x += hit_direction[0]*0.5
			self.wpose.position.y += hit_direction[1]*0.5
			self.waypoints.append(copy.deepcopy(self.wpose))
			(plan,fraction) = self.move_group.compute_cartesian_path(self.waypoints,0.01,0.0)
			self.move_group.execute(plan,wait=True)
		return plan, fraction

if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('hit_ball', anonymous=True, log_level=rospy.DEBUG)
    my_putter = HitTheBall()
	
    rospy.loginfo(my_putter.current_state())
    hit_direction= my_putter.ball_pos_to_sawyer([0.39,-0.355,-0.44])
    my_putter.plan_path(hit_direction)
    rospy.spin()
		
