#!/usr/bin/env python
''' This node provides a python interface to achieve following functions 
based on the move_it python interface.

- getting robot current state
- planning to a pose goal
- calculate a starting pose before hitting
- add table and putter into planning scene
- add a constrait on joint 6

PUBLISHERS:
    /move_group/display_planned_path (moveit_msgs.msg.DisplayTrajectory) 
        ~ a DisplayTrajectory publisher which is used to display trajectories in Rviz
'''



from __future__ import division
import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
import math
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
import numpy as np
from tf.transformations import quaternion_from_euler
from moveit_msgs.msg import RobotState, Constraints, JointConstraint
import intera_interface
from mini_golf.srv import InitRobot, InitRobotRequest, InitRobotResponse
from mini_golf.srv import MoveBehindBall,MoveBehindBallRequest, MoveBehindBallResponse



class MoveGroupPythonInterface(object):
    ''' Integrate the functions we need for the mini-golf project '''



    def __init__(self):
        ''' Initialize RobotCommander, PlanningSceneInterface and MoveGroupCommander objects respectively '''
        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group_name = "right_arm"
        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)
        self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                               moveit_msgs.msg.DisplayTrajectory,
                                               queue_size=20)

        # get the end effector link name it is controlling
        self.eef_link = self.move_group.get_end_effector_link()
        rospy.logdebug('End effector link: %s', self.eef_link)

        # for not detecting collision between the putter and the following links
        self.gripper_links = ['right_gripper_base',\
                                'right_electric_gripper_base',\
                                'right_gripper_tip',\
                                'right_hand',\
                                'right_connector_plate_base',\
                                'right_gripper_l_finger',\
                                'right_gripper_l_finger_tip',\
                                'right_gripper_r_finger',\
                                'right_gripper_r_finger_tip',\
                                'right_hand_camera',\
                                'right_wrist']

        # used for sawyer python api
        self.limb = intera_interface.Limb('right')



    def current_state(self):
        ''' Get the current state of the robot
        
        Returns:
            current_state : current state of the robot
        '''
        current_state = self.robot.get_current_state()
        return current_state



    def go_to_pose(self, position, orientation):
        ''' Make the end effector go to a pose in task space
        
        Args:
            position (1*3 list e.g. [0.4,0.1,0.4]) : x, y, z coordinates of goal position
            orientation (1*4 list e.g. [0,0,0,1]) : x, y, z, w (quaternion) of a orientation
        '''
        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.position.x = position[0]
        pose_goal.position.y = position[1]
        pose_goal.position.z = position[2]
        pose_goal.orientation.x = orientation[0]
        pose_goal.orientation.y = orientation[1]
        pose_goal.orientation.z = orientation[2]
        pose_goal.orientation.w = orientation[3]

        self.move_group.set_pose_target(pose_goal)

        # change the max velocity and acceleratin factor before execution
        self.move_group.set_max_velocity_scaling_factor(1.0)
        self.move_group.set_max_acceleration_scaling_factor(1.0)

        # try to find the solution for several times
        for i in range(10):

            plan = self.move_group.go(wait=True)

            if plan == True:
                self.move_group.stop()
                self.move_group.clear_pose_targets()
                return True
            else:
                rospy.logdebug('Fail to find solution: trial %s', i+1)
        
        return False



    def get_start_pose(self, pos_hole, pos_ball, distance = 0.05):
        ''' Calculate the starting pose give the position of the hole and the ball
        
        Args:
            pos_hole (e.g.[0.68,0.27,0.07]): The 3D position (x,y,z) of the hole in the world frame
            pos_ball (e.g.[0.63,-0.34,0.07]): The 3D position (x,y,z) of the ball in the world frame

        Returns:
            position (1*3 list e.g. [0.4,0.1,0.4]) : x, y, z coordinates of the position
            orientation (1*4 list e.g. [0,0,0,1]) : x, y, z, w (quaternion) of the orientation
        '''
        #### Position ####
        # x_s, y_s, z_s denotes the starting position of the center of the putter
        # default distance between the starting position of the putter and the ball is 5cm

        # z_s is same as the height of the ball
        z_s = pos_ball[2]

        # get the vector pointing from the hole to the ball
        v_h2b = (np.array(pos_ball) - np.array(pos_hole))[:2]

        # normalize the vector
        v_h2b_norm = np.linalg.norm(v_h2b)
        v_h2b = v_h2b / v_h2b_norm
        
        # compute x_s, y_s
        x_s = pos_ball[0] + (v_h2b * distance)[0]
        y_s = pos_ball[1] + (v_h2b * distance)[1]

        position =  [x_s, y_s, z_s]

        #### Orientation ####

        # get the angle in xy plane from the vector
        # v_h2b is point from the hole to the ball
        # we need the vector pointing from the ball to the hole
        angle_xy_plane = math.atan2(-v_h2b[1], -v_h2b[0])

        # convert it to euler angle
        euler_yaw = angle_xy_plane
        euler_pitch = pi
        euler_roll = 0

        # convert it to quaternion
        quaternion = quaternion_from_euler(euler_roll, euler_pitch, euler_yaw)
        orientation = [quaternion[0],quaternion[1],quaternion[2],quaternion[3]]

        return position, orientation



    def add_table(self, x_offset=0.6, z_height=-0.5):
        ''' Add table to the planning scene 
        
        Args:
            x_offset (m) : the distance from center of the table to world frame in x direction
            z_height (m) : the height of the table (upper surface)
        '''
        table_pose = geometry_msgs.msg.PoseStamped()
        table_pose.header.frame_id = "world"
        table_pose.pose.orientation.w = 1.0
        table_pose.pose.position.x = x_offset
        table_pose.pose.position.z = z_height - 0.025
        table_name = "table"
        table_size = (0.6096, 1.2192, 0.05)
        self.scene.add_box(table_name, table_pose, size=table_size)
        if not self.wait_object_update(table_name):
            rospy.logdebug('Attach table failed.')



    def add_putter(self):
        ''' Add putter to the planning scene and attach it to the gripper '''
        putter_pose = geometry_msgs.msg.PoseStamped()
        putter_pose.header.frame_id = "right_gripper_tip"
        putter_pose.pose.orientation.w = 1.0
        putter_pose.pose.position.z = -0.0325
        putter_name = "putter"
        putter_size = (0.018, 0.0625, 0.087)
        self.scene.add_box(putter_name, putter_pose, size=putter_size)
        if self.wait_object_update(putter_name):
            self.scene.attach_box(self.eef_link, putter_name, touch_links=self.gripper_links)
        else:
            rospy.logdebug('Attach putter failed.')



    def wait_object_update(self, object_name, timeout=4):
        ''' Wait for the collision update to be completed 
        
        Args:
            object_name : The name of the object to be checked
            timeout (s) : timeout in seconds
        '''
        start = rospy.get_time()
        seconds = rospy.get_time()
        while (seconds - start < timeout) and not rospy.is_shutdown():
            is_known = object_name in self.scene.get_known_object_names()
            if is_known:
                return True

            rospy.sleep(0.1)
            seconds = rospy.get_time()

        return False



    def init_path_constraints(self):
        ''' Add the joint 6 constraint to align joint 5 with the hitting direction '''
        self.constraints = Constraints()
        joint_constraint = JointConstraint()

        self.constraints.name = "align_joint5"

        joint_constraint.position = 3.14/2
        joint_constraint.tolerance_above = 0.1
        joint_constraint.tolerance_below = 0.3
        joint_constraint.weight = 1

        joint_constraint.joint_name = "right_j6"
        self.constraints.joint_constraints.append(joint_constraint)

        self.move_group.set_path_constraints(self.constraints)



    def hit_it(self):
        ''' Hit the ball by rotating joint 5 '''
        rospy.sleep(3)
        joint_goal = self.move_group.get_current_joint_values()
        joint_goal[5] += pi/6
        self.move_group.go(joint_goal, wait=True)
        self.move_group.stop()

        rospy.sleep(3)
        joint_goal = self.move_group.get_current_joint_values()
        joint_goal[5] -= pi/3
        self.move_group.go(joint_goal, wait=True)
        self.move_group.stop()


    def return_home(self):
        ''' Go to the defined home position '''
        joint_goal = self.move_group.get_current_joint_values()
        joint_goal[0]=0.0
        joint_goal[1]=0.0
        joint_goal[2]=0.0
        joint_goal[3]=np.pi/2
        joint_goal[4]=0.0
        joint_goal[5]=0.0
        joint_goal[6] = -np.pi/2
        self.move_group.go(joint_goal, wait=True)
        self.move_group.stop()



    ##### Wrapping functions #####
    def initialize_robot_pipline(self,req):
        ''' Initialize the robot, add collision detection '''
        # add the table and putter to the planning scene
        self.add_table()
        self.add_putter()



    def move_to_start_position_pipline(self,req):
        ''' Complete the pipline of moving end effector to the starting pose '''

        self.return_home()

        # setup the constraint
        if req.if_add_constraint:
            self.init_path_constraints()

        hole_position = [req.hole_position.position.x,req.hole_position.position.y,req.hole_position.position.z]
        ball_position = [req.ball_position.position.x,req.ball_position.position.y,req.ball_position.position.z]

        # calculate starting pose
        # position, orientation = self.get_start_pose([0.736,0.432,-0.44],[0.5,0.305,-0.44])
        position, orientation = self.get_start_pose(hole_position,ball_position)

        # go to starting pose
        if_success = self.go_to_pose(position,orientation)


if __name__ == '__main__':
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('move_group_python_interface', anonymous=True, log_level=rospy.DEBUG)

    # initialize move group commander
    my_sawyer = MoveGroupPythonInterface()

    # get current state
    rospy.logdebug(my_sawyer.current_state())

<<<<<<< HEAD
    # add the table and putter to the planning scene
    my_sawyer.add_table()
    my_sawyer.add_putter()

    #name: [head_pan, right_j0, right_j1, right_j2, right_j3, right_j4, right_j5, right_j6, torso_t0]
    #position: [0.1414794921875, -0.2295791015625, 1.1898857421875, -0.2348466796875, -2.1429931640625, -2.977087890625, -2.2255673828125, -1.4547744140625, 0.0]

    #name: [right_j0, head_pan, right_j1, right_j2, right_j3, right_j4, right_j5, right_j6, right_gripper_l_finger_joint,
    #right_gripper_r_finger_joint]
    #position: [-0.947546875, 0.147466796875, -3.21740625, -2.97183984375, 1.694666015625, -2.426177734375, 0.2669013671875, -0.0843173828125, 0.041667, -0.041667]

    my_sawyer.return_home()
    # calculaete starting pose
    position, orientation = my_sawyer.get_start_pose([0.8,0.532,-0.43],[0.33,0.4,-0.43]) #([0.63,-0.34,0.07],[0.68,0.27,0.07])
    """

    area1 = [0.3,0.355,-0.43]
    area2 = [0.3,0.0,-0.43]
    area3 = [0.35,-0.295,-0.43]
    area4 = [0.75,-0.355,-0.43]
    area5 = [0.75,0.0,-0.43]
    area6 = [0.64,0.47,-0.4]
    """
    rospy.logdebug('The orientation is: %s', orientation)
    
    # go to starting pose
    if_success = my_sawyer.go_to_pose(position,orientation)
    #my_sawyer.go_to_pose_initial()
    #plan , fraction = my_sawyer.plan_path()
    #my_sawyer.execute_plan(plan)

    rospy.spin()

"""
def plan_path(self):
		self.waypoints = []
		self.wpose = self.move_group.get_current_pose().pose
		self.wpose.position.x += 1*0.01
		self.wpose.position.y -= 1*0.01
		self.waypoints.append(copy.deepcopy(self.wpose))
		(plan,fraction) = self.move_group.compute_cartesian_path(self.waypoints,0.01,0.0)
		return plan, fraction
	
    def execute_plan(self,plan):
		self.move_group.execute(plan,wait=True)

    def go_to_pose_initial(self):
        ''' Make the end effector go to a pose in task space
        
        Args:
            position (1*3 list e.g. [0.4,0.1,0.4]) : x, y, z coordinates of goal position
            orientation (1*4 list e.g. [0,0,0,1]) : x, y, z, w (quaternion) of a orientation
        '''
	wpose = self.move_group.get_current_pose().pose
        pose_goal = geometry_msgs.msg.Pose()
        pose_goal.position.x = wpose.position.x
        pose_goal.position.y = wpose.position.y
        pose_goal.position.z = wpose.position.z
        pose_goal.orientation.x = wpose.orientation.x
        pose_goal.orientation.y = wpose.orientation.y
        pose_goal.orientation.z = wpose.orientation.z
        pose_goal.orientation.w = wpose.orientation.w
	self.move_group.set_pose_target(pose_goal)
"""
=======
    # Create service
    s1 = rospy.Service('init_robot', InitRobot, my_sawyer.initialize_robot_pipline)
    s2 = rospy.Service('move_behind_ball', MoveBehindBall, my_sawyer.move_to_start_position_pipline)

    rospy.spin()
>>>>>>> upstream/master
