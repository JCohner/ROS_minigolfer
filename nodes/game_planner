#!/usr/bin/env python

import rospy
from mini_golf.srv import CV_POIs, CV_POIsResponse, GetPhysical, GetPhysicalResponse, HitBall, HitBallResponse, InitRobot, InitRobotResponse, MoveBehindBall, MoveBehindBallResponse, DisplayPicture, DisplayPictureResponse, GameOn, GameOnResponse
from geometry_msgs.msg import Transform, Pose, Point
import numpy as np
from tf.transformations import quaternion_matrix

def se3_inv(matrix):
    """
    Calculates the inverse of an se(3) transformation matrix.
    """
    R = matrix[0:3,0:3] #roation matrix
    p = matrix[0:3,-1] #translation vector

    RT = np.transpose(R)                        #transpose rotation matrix

    inv_p = -np.matmul(RT, p)                      #invert translation vector

    g = np.zeros((4,4))
    g[0:3,0:3] = RT 
    g[0:3,-1] = inv_p
    g[-1,-1] = 1

    return g                                    #output transformation matrix


class GamePlanner(object):
    def __init__(self):
        #establish game on service for user to call
        rospy.Service('/game_on', GameOn, self.game_on)

        #wait for services
        rospy.wait_for_service('/get_pois')
        rospy.wait_for_service('/init_robot')
        rospy.wait_for_service('/get_physical')
        rospy.wait_for_service('/move_behind_ball')
        rospy.wait_for_service('/hit_ball')

        #establish service proxies
        self.get_physical = rospy.ServiceProxy('/get_physical', GetPhysical)
        self.get_POIs = rospy.ServiceProxy('/get_pois', CV_POIs)
        self.init_robot = rospy.ServiceProxy('/init_robot', InitRobot)
        self.move_behind_ball = rospy.ServiceProxy('/move_behind_ball', MoveBehindBall)
        self.hit_ball = rospy.ServiceProxy('/hit_ball', HitBall)
        self.display_picture = rospy.ServiceProxy('/picture_display', DisplayPicture)

        self.setup_robot()
        print("initializing robot...")
        rospy.sleep(3) #sleep for 3 seconds to let things chill out
        self.loop()

    def game_on(self, req):
        #gets ball and hole positions in sawyer frame
        ball_pose, hole_pose = self.get_positions()
        #tell sawyer to move behind ball in sawyer frame coordinates
        # self.display_picture(1)
        self.move(ball_pose, hole_pose)
        print("setting up to hit wait for it....")
        rospy.sleep(5) #dumb sleep for 10 seconds while we get behind ball
        self.hit_ball() 
        # self.display_picture(0)

        return GameOnResponse()


    def setup_robot(self):
        #figure out x,y origin of gamespace in sawyer frame
        #either drag cuff or use our extrinsic camera callibration
        self.init_robot()

    def get_positions(self):
        resp = self.get_POIs()
        ball_pose_camera = resp.ball_pose
        hole_pose_camera = resp.hole_pose
        ball_pose_sawyer = self.get_physical(ball_pose_camera)
        hole_pose_sawyer = self.get_physical(hole_pose_camera)
        print("ball:")
        print((ball_pose_sawyer.sawyer_frame.position.x,ball_pose_sawyer.sawyer_frame.position.y))
        print("hole:")
        print((hole_pose_sawyer.sawyer_frame.position.x,hole_pose_sawyer.sawyer_frame.position.y))

        return ball_pose_sawyer, hole_pose_sawyer

    def move(self, ball_pose, hole_pose):
        print("ball pose is:")
        print(ball_pose.sawyer_frame)
        print("hole pose is:")
        print(hole_pose)
        hole_pose.sawyer_frame.position.x = 0.9536
        hole_pose.sawyer_frame.position.y = 0.5726

        self.move_behind_ball(hole_pose.sawyer_frame, ball_pose.sawyer_frame, False)

    def loop(self):
        rate = rospy.Rate(2)
        while not rospy.is_shutdown():
            #get ball position in overhead camera frame coordinate
            # self.get_positions()
            rate.sleep()





if __name__ == '__main__':
    rospy.init_node("game_planner")
    GamePlanner()
