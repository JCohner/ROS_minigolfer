#!/usr/bin/env python

#necessary imports
from __future__ import print_function
import rospy
import numpy as np
from sensor_msgs.msg import Image
from geometry_msgs.msg import Pose
from cv_bridge import CvBridge #CvBridgeError
from mini_golf.srv import CV_POIs, CV_POIsResponse
import cv2

class DetectBall(object):
    """
    Detects a ball in the visual field. Currently uses HSV color segmentation
    """
    def __init__(self):
        """
        Initialization function. Creates variables, image converter, and publisher/subscriber
        """
        self.rows = 0                       #image height placeholder
        self.cols = 0                       #image width placeholder

        self.hole_X = 0                     #placeholders for hole locator circle
        self.hole_Y = 0
        self.hole_rad = 0

        self.ball_pose = Pose()             #ball position
        self.hole_pose = Pose()             #hole position

        #colorspaces found using script from:
        #https://github.com/opencv/opencv/blob/3.4/samples/cpp/tutorial_code/ImgProc/Threshold_inRange.cpp
        #HSV-space ranges for ball color (blue)
        self.ball_H_range = (100, 115)
        self.ball_S_range = (130, 255)
        self.ball_V_range = (100, 255)
        #HSV ranges for turf (green)
        self.turf_H_range = (20, 45)
        self.turf_S_range = (100, 255)
        self.turf_V_range = (0, 200)
        rospy.loginfo("HSV filters set.")

        self.bridge = CvBridge()            #converts between ROS and cv2 image

        self.capture = cv2.VideoCapture(2)  #capture from webcam
        '''
        IMPORTANT!!!
        On Riley's computer, use argument 0 for attached camera, use 2 for laptop webcam.
        I don't know why this is but roll with it. Might be different on other people's computers,
        if the image isn't showing up in ImageViewer try using the other argument.
        '''

        #initialize publishers
        self.image_pub = rospy.Publisher('/overhead_image_out', Image, queue_size=1)
        self.ball_pose_pub = rospy.Publisher('/ball_pose', Pose, queue_size=10)
        self.hole_pose_pub = rospy.Publisher('/hole_pose', Pose, queue_size=10)
        rospy.loginfo("Publishers initialized.")

        #call hole-locating function
        self.find_hole()

        #initialize subscriber
        # rospy.Subscriber('/io/internal_camera/head_camera/image_rect_color', Image,
        #                  self.detect_ball)
        # rospy.loginfo("Subscriber initialized.")

        #initialize service
        self.serv = rospy.Service('get_pois', CV_POIs, self.serv_callback)

    def serv_callback(self, req):
        resp = CV_POIsResponse()
        resp.ball_pose = self.ball_pose
        resp.hole_pose = self.hole_pose
        return resp

    def find_hole(self):
        """
        Finds the hole in the putting green
        """
        #read webcam image
        ret, hole_img_in = self.capture.read()

        #convert image to HSV
        hole_hsv = cv2.cvtColor(hole_img_in, cv2.COLOR_BGR2HSV)

        #color thresholding - turf (green)
        turf_threshold = cv2.inRange(hole_hsv, (self.turf_H_range[0], self.turf_S_range[0],
                                                self.turf_V_range[0]),
                                     (self.turf_H_range[1], self.turf_S_range[1],
                                      self.turf_V_range[1]))

        #Gaussian blur
        turf_blur = cv2.GaussianBlur(turf_threshold, (5, 5), 0)

        #erode & dilate image to remove noise
        turf_erode = cv2.erode(turf_blur, np.ones((5, 5)), iterations=1)
        turf_dilate = cv2.dilate(turf_erode, np.ones((5, 5)), iterations=2)

        #find contours in image
        image, contours, hierarchy = cv2.findContours(turf_dilate, cv2.RETR_LIST,
                                                      cv2.CHAIN_APPROX_NONE)

        #find contours based on size
        for cont in contours:                                   #for all contours
            area = cv2.contourArea(cont)                        #determine contour area
            if area > 600 and area < 800:                       #if contour is correct size
                #if using smaller webcam: threshold is 1250:1750
                (x, y), radius = cv2.minEnclosingCircle(cont)   #find smallest circle enclosing it
                self.hole_X = int(x)                            #hole center x-coordinate
                self.hole_Y = int(y)                            #hole center y-coordinate
                self.hole_rad = int(radius + 3)                 #hole radius

        #set hole coordinates to publish
        self.hole_pose.position.x = self.hole_X
        self.hole_pose.position.y = self.hole_Y

        #publish hole position
        self.hole_pose_pub.publish(self.hole_pose)

    def detect_ball(self): 
        """
        Detects the ball using color thresholding
        """

        #read webcam image
        ret, img_in = self.capture.read()

        #convert to HSV colorspace
        img_hsv = cv2.cvtColor(img_in, cv2.COLOR_BGR2HSV)

        #color thresholding
        img_threshold = cv2.inRange(img_hsv,
                                    (self.ball_H_range[0], self.ball_S_range[0],
                                     self.ball_V_range[0]),
                                    (self.ball_H_range[1], self.ball_S_range[1],
                                     self.ball_V_range[1]))

        #Gaussian blur
        blur = cv2.GaussianBlur(img_threshold, (5, 5), 0)

        #find contours in blurred image
        image, contours, hierarchy = cv2.findContours(blur, cv2.RETR_EXTERNAL,
                                                      cv2.CHAIN_APPROX_NONE)

        #isolate largest contour (should be the ball)
        if len(contours) > 0:
            biggest_contour = max(contours, key=cv2.contourArea)

            #find smallest circles enclosing biggest contour
            (x, y), radius = cv2.minEnclosingCircle(biggest_contour)    #smallest enclosing circle
            centerX = int(x)                                            #center X coordinate
            centerY = int(y)                                            #center Y coordinate
            radius = int(radius)                                        #radius

            #draw circles on image at ball and hole locations
            img_circle = cv2.circle(img_in, (centerX, centerY), radius, (0, 0, 255), 2)
            img_circle = cv2.circle(img_in, (self.hole_X, self.hole_Y), self.hole_rad,
                                    (51, 255, 255), 2)

            #ball x- and y- coordinates
            self.ball_pose.position.x = centerX
            self.ball_pose.position.y = centerY

            print("pixel ideation")
            print("x:{}\ty:{}".format(centerX,centerY))

            q = np.array([centerX,centerY]) 
            off_set_to_game_orig = np.array([507,341])
            q = q + off_set_to_game_orig
            q[0] = -q[0] #flip handedness
            R = np.array([[0,1],[-1,0]]) #-90 degree rotation matrix
            q = np.matmul(R,q)
            q = q * 0.0023

            q[0] = q[0] + 0.455
            q[1] = q[1] + -0.494
            print("positional ideation")
            print("x:{}\ty:{}".format(q[0],q[1]))


            # T = np.array([[0,-1,0,0.715],[-1,0,0,-0.0174],[0,0,-1,1.65],[0,0,0,1]])
            # b = np.array([centerX * 0.002,centerY * 0.002,1,1]) 

            # a = np.matmul(T,b) 
            # print("x:{}\ty:{}".format(a[0],a[1]))

            #publish ball position
            self.ball_pose_pub.publish(self.ball_pose)

        elif len(contours) == 0:
            img_circle = cv2.circle(img_in, (self.hole_X, self.hole_Y), self.hole_rad,
                                    (51, 255, 255), 2)

        #convert cv2 image to ROS image
        img_out = self.bridge.cv2_to_imgmsg(img_circle, "bgr8")

        #publish image for display
        self.image_pub.publish(img_out)

def main():
    """
    Main function; initializes the node and calls the DetectBall class
    """
    rospy.loginfo("Beginning Ball Detection...")            #console output message
    det = DetectBall()
    while not rospy.is_shutdown():
        det.detect_ball()

if __name__ == '__main__':
    rospy.init_node('cv_detect_ball')                       #initialize node
    rospy.loginfo("CV Node Initialized")                    #console output message
    try:
        main()
    except rospy.ROSInterruptException:
        pass
